/*
 * CVector API.
 *
 * Motivation:
 * The C vector uses the same code for all types.
 * It avoids the "code bloat" generated by template classes in C++.
 * The C vector is faster, thinner, and easier to maintain.
 * It is representative of teh vector used in embedded systems
 * with limited program memory.
 *
 * Reference:
 * Stanford CS107
 *
 * Authors:
 * Jerry Cain, revised by Elizabeth Howe
 */

#ifndef _cvector_h
#define _cvector_h

#include <stdbool.h>
#include <stddef.h>

/*
* A client-supplied function pointer used to sort or search  for elements.
* If the elem at addr1 is less than the elem at addr2,
* return a negative number.
* If the elem at addr1 is greater than the elem at addr2,
* return a positive number.
* If the two elements are equal, return 0.
 */
typedef int (*comp_fun)(const void *addr1, const void *addr2);

/*
 * Define the typename for a pointer to a client-supplied
 * cleanup function.
 * addr points to the vector element that will be cleaned up.
 */
typedef void (*free_fun)(void *addr);

/* Defines the CVector type. */
typedef struct CVector_internals CVector;

/*
 * Create a dynamically-allocated empty CVector and returns a pointer to it.
 *
 * O(1) time.
 * elemsz specifies the size, in bytes, of the type of elements
 * that will be stored in the CVector.
 *
 * capacity_hint allows the client to tune the resizing behavior.
 * The CVector's internal storage will initially be allocated to hold the
 * number of elements hinted.
 * If the initially allocated capacity is outgrown, the CVector enlarges its
 * capacity.
 *
 * fn is a client callback function to cleanup an element.
 * fn will be called on an element being removed/replaced and on every element
 * in the CVector when it is destroyed.
 * The client can pass NULL for fn if elements don't require any cleanup.
 */
CVector *cvec_create(size_t elemsz, size_t capacity_hint, free_fun fn);

/*
 * Call the client's cleanup function on each element
 * and deallocate all memory used for the CVector's storage.
 * O(N) time.
 */
void cvec_dispose(CVector *cv);

/*
 * Return the number of elements currently stored in the CVector.
 * O(1) time.
 */
int cvec_count(const CVector *cv);

/*
 * Return a pointer to element in the vector at position index.
 * O(1) time.
 */
void *cvec_nth(const CVector *cv, int index);

/*
 * Insert a new element into the CVector at the given index
 * Shift up other elements to make room as necessary.
 * The value at that location is copied into internal CVector storage.
 * O(N) time.
 */
void cvec_insert(CVector *cv, const void *addr, int index);

/*
 * Append a new element to the end of the CVector.
 * The element value is copied from the memory location pointed to by addr.
 */
void cvec_append(CVector *cv, const void *addr);

/*
 * Search the CVector for an element matching a key element.
 * Use the provided cmp callback to compare elements.
 * Consider all elements from start index to end.
 * The sorted parameter allows the client to specify that elements
 * are currently stored in sorted order, in which case cvec_search has
 * improved performance (O(logN) v O(N) time).
 * Return the index of the matching element.
 * If more than one match exists, any of the matching indexes can be returned.
 * Return -1 if no match is found.
 */
int cvec_search(const CVector *cv, const void *keyaddr,
                comp_fun cmp, int start, bool sorted);

/*
 * Rearrange element in the CVector into ascending order according to the
 * client's provided cmp callback.
 * O(NlogN) time.
 */
void cvec_sort(CVector *cv, comp_fun cmp);

/*
 * Usage: for (void *cur = cvec_first(v);
 *             cur != NULL;
 *             cur = cvec_next(v, cur))
 * Provide iteration over the CVector elements.
 * Return a pointer to the first element of the vector (cvec_first)
 * or a pointer to the next element of the vector (cvec_next).
 * Precondition: address of prev is valid.
 */
void *cvec_first(const CVector *cv);
void *cvec_next(const CVector *cv, const void *prev);

/*
 * Copy the element pointed to by addr into position index
 * O(N) time.
 */
void cvec_elem_replace(CVector *cv, const void *addr, int index);

/*
 * Delete the element at the specified position from the vector.
 * O(N) time.
 */
void cvec_elem_remove(CVector *cv, int position);
#endif