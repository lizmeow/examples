/*
* Vector API.
*
* Motivation:
* The C vector uses the same code for all types. 
* It avoids the "code bloat" generated by template classes in C++.
* The C vector is faster, thinner, and easier to maintain.
* It is representative of the vector used in embedded systems
* with limited program memory.
*
* Reference:
* Stanford CS107
*
* Authors:
* Jerry Cain, revised by Elizabeth Howe
*/

#ifndef _VECTOR_H_
#define _VECTOR_H_

#include <stdbool.h>
#include "vector_internal.h"
/*
 * A client-supplied function pointer used to sort or search for elements. 
 * If the elem at elem_addr1 is less than the elem at elem_addr2, 
 * return a negative number.
 * If the elem at elem_addr1 is greater than elem at elem_addr2, 
 * return a positive number.
 * If the two elements are equal, return 0.
 */
typedef int (*vector_cmp_fun)(const void *elem_addr1, const void *elem_addr2);

/* 
 * A client-supplied function pointer used to map over the elements in a vector.  
 * A map function is called with a pointer to the element and a client data 
 * pointer passed in from the original caller.
 */
typedef void (*vector_map_fun)(void *elem_addr, void *aux_data);

/* 
 * A client-supplied function pointer used as the clean-up function for each 
 * element. 
 */
typedef void (*vector_free_fun)(void *elem_addr);

/* 
 * Usage: vector v;
 *        vector_new(&v, sizeof(char *), my_string_free, 10);
 *
 * Construct an empty vector in the caller's stack.
 * 
 * elem_size specifies the number of bytes that a single 
 * element of the vector should take up. 
 *
 * free_fun is the function that will be called on an element that
 * is about to be deleted (using vector_elem_delete) or on each element in the
 * vector when the entire vector is being freed (using vector_dispose). 
 * If free_fun is NULL, the elements don't require any special handling.
 *
 * n_elems_grow_by specifies the initial allocated length 
 * (in terms of number of elements) of the vector, as well as the dynamic 
 * reallocation increment for those times when the vector needs to grow. 
 * 
 * n_elems_grow_by is the client's opportunity to tune the resizing
 * behavior for his/her particular needs. Clients who expect their vectors to
 * become large should probably choose a large initial allocation size, whereas
 * clients who expect the vector to be relatively small should choose a smaller
 * n_elems_grow_by size.
 * 
 * If the client passes 0 for n_elems_grow_by, the implementation
 * will use the default value of its own choosing.
 */
void vector_new(vector *v, int elem_size, 
                vector_free_fun free_fun, int n_elems_grow_by);

/* Free up memory consumed by vector */
void vector_dispose(vector *v);

/*
 * Return the logical length of the vector, i.e. the number of elements
 * currently in the vector.
 */

int vector_length(const vector *v);
	   
/* Return a pointer to the element numbered position in the vector */ 
void *vector_nth(const vector *v, int position);
					  
/*
 * Insert a new element into the specified vector, placing it at the specified
 * position. 
 * The new element's contents are copied from the memory pointed to by 
 * elem_addr.
 */
void vector_insert(vector *v, const void *elem_addr, int position);

/*
 * Append a new element to the end of the specified vector. 
 * The new element's contents are copied from the memory pointed to by 
 * elem_addr.
 */
void vector_append(vector *v, const void *elem_addr);
  
/* Overwrite the element at the specified position with a new value. */
void vector_elem_replace(vector *v, const void *elem_addr, int position);

/* Delete the element at the specified position from the vector. */
void vector_elem_delete(vector *v, int position);
  
/* 
 * Search the specified vector for an element whose contents match
 * the element pointed to by the key.  
 * Use the comparator argument to test for equality. 
 * Start search from the start_index. 
 * If is_sorted is true, the vector is assumed to be sorted and efficient
 * algorithms will be applied. 
 * If a match is found, return the position of the matching element.
 * If no match is found, return -1.  
 */  
int vector_search(const vector *v, const void *key, vector_cmp_fun search_fun, 
                  int start_index, bool is_sorted);

/* Sort the vector into ascending order according to the supplied comparator. */
void vector_sort(vector *v, vector_cmp_fun comparefn);

/*
 * Call the function map_fun on each element.  The function is 
 * called with the address of the vector element and the aux_data pointer.  
 * aux_data value allows the client to pass extra state information to 
 * the client-supplied function, if necessary.  If no client data is required, 
 * this argument should be NULL.
 */
void vector_map(vector *v, vector_map_fun map_fun, void *aux_data);

#endif